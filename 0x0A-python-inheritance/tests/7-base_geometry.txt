>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> geometry_instance = BaseGeometry()

>>> geometry_instance.integer_validator("my_int", 12)

>>> geometry_instance.integer_validator("width", 89)

>>> try:
...     geometry_instance.integer_validator("name", "John")
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] name must be an integer'

>>> try:
...     geometry_instance.integer_validator("age", 0)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[ValueError] age must be greater than 0'

>>> try:
...     geometry_instance.integer_validator("distance", -4)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[ValueError] distance must be greater than 0'

>>> geometry_instance.integer_validator("positive_int", 42)

>>> try:
...     geometry_instance.integer_validator("zero_value", 0)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[ValueError] zero_value must be greater than 0'

>>> try:
...     geometry_instance.integer_validator("non_int_string", "Python")
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] non_int_string must be an integer'

>>> try:
...     geometry_instance.integer_validator("float_value", 3.14)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] float_value must be an integer'

>>> try:
...     geometry_instance.integer_validator("boolean_value", True)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] boolean_value must be an integer'

>>> try:
...     geometry_instance.integer_validator("list_value", [1, 2, 3])
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] list_value must be an integer'

>>> try:
...     geometry_instance.integer_validator("tuple_value", (1, 2, 3))
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] tuple_value must be an integer'

>>> geometry_instance.integer_validator("height", 10)
>>> geometry_instance.integer_validator("width", 20)
>>> geometry_instance.integer_validator("length", 30)
>>> geometry_instance.integer_validator("large_positive", 999999999999)

>>> try:
...     geometry_instance.integer_validator("large_negative", -999999999999)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[ValueError] large_negative must be greater than 0'

>>> try:
...     geometry_instance.integer_validator("none_value", None)
... except Exception as e:
...     f"[{e.__class__.__name__}] {e}"
'[TypeError] none_value must be an integer'
